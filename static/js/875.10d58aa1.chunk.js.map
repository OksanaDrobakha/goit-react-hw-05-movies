{"version":3,"file":"static/js/875.10d58aa1.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #000000aa;\n  color: white;\n`;\n","import { LoaderBox } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderBox>\n      <span>...LOADING</span>\n    </LoaderBox>\n  );\n};\n\nexport default Loader;\n","const MovieInfo = ({ movieDetails }) => {\n  const { poster, year, genresList, vote, title, overview } = movieDetails;\n  return (\n    <div style={{ display: 'flex', gap: 20 }}>\n      <img src={poster} alt={title} />\n      <div>\n        <h2>\n          {title} ({year})\n        </h2>\n        <p>User Score: {vote}%</p>\n        <p>Overview</p>\n        <p>{overview}</p>\n        <p>Genres:</p>\n        <p>{genresList}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieInfo;\n","import Loader from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { fetchMovieDetails, getPoster } from 'services/api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetch = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMovieDetails(movieId);\n\n        const { title, overview, release_date, vote_average, genres } = data;\n\n        const poster = getPoster(data.poster_path);\n        const year = new Date(release_date).getFullYear();\n        const genresList =\n          genres.map(genre => genre.name).join(', ') || 'No info';\n        const vote = Math.round(vote_average * 10);\n\n        setMovieDetails({ poster, year, genresList, vote, title, overview });\n      } catch (error) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      <section>\n        <div>\n          <h1>Movie Details</h1>\n          {isLoading && <Loader />}\n          <Link to={backLinkHref.current}>GO BACK</Link>\n          {movieDetails && <MovieInfo movieDetails={movieDetails} />}\n          <nav>\n            <NavLink to=\"cast\">Cast</NavLink>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </nav>\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = '09d7a3eefc954f8342048cf5b31d1e79';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500';\nconst NO_POSTER =\n  'https://fakeimg.pl/400x600/6693ba/ffffff?text=No+Poster&font=lobster';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get('/trending/movie/day', { params });\n  return response.data;\n};\n\nexport const fetchMoviesByName = async name => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n    query: name,\n  };\n  const response = await axios.get('search/movie', { params });\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}`, { params });\n  return response.data;\n};\n\nexport const fetchActors = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}/credits`, { params });\n  return response.data.cast\n    .map(actor => {\n      return {\n        id: actor.id,\n        name: actor.name,\n        poster: getPoster(actor.profile_path),\n      };\n    })\n    .slice(0, 10);\n};\n\nexport const fetchReviews = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}/reviews`, { params });\n  return response.data.results\n    .map(item => {\n      return {\n        id: item.id,\n        name: item.author,\n        content: item.content,\n      };\n    })\n    .slice(0, 10);\n};\n\nexport const getPoster = url => (url ? BASE_POSTER_URL + url : NO_POSTER);\n"],"names":["LoaderBox","styled","movieDetails","poster","year","genresList","vote","title","overview","style","display","gap","src","alt","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useState","setMovieDetails","isLoading","setIsLoading","useEffect","fetch","fetchMovieDetails","data","release_date","vote_average","genres","getPoster","poster_path","Date","getFullYear","map","genre","name","join","Math","round","Loader","to","current","Suspense","fallback","API_KEY","axios","fetchTrending","params","api_key","language","response","fetchMoviesByName","include_adult","query","id","fetchActors","cast","actor","profile_path","slice","fetchReviews","results","item","author","content","url"],"sourceRoot":""}