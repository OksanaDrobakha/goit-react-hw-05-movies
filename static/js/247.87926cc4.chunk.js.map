{"version":3,"file":"static/js/247.87926cc4.chunk.js","mappings":"kOA0CA,UArCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CACA,IAAMQ,EAAK,mCAAG,oGAEVF,GAAa,GAFH,UAGSG,EAAAA,EAAAA,IAAYT,GAHrB,OAGJU,EAHI,OAKVN,EAAUM,GALA,yEAQVJ,GAAa,GARH,4EAAH,qDAYXE,GAboB,CAcrB,GAAE,CAACR,KAEF,gCACGK,IAAa,SAAC,IAAD,KACd,wBACGF,EAAOQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACV,2BACE,uBAAID,KACJ,gBAAKE,IAAKD,EAAQE,IAAKH,MAFhBD,EADC,QASnB,C,qECtCYK,E,OAAYC,GAAAA,IAAH,6N,SCQtB,EARe,WACb,OACE,SAACD,EAAD,WACE,0BAAM,gBAGX,C,uNCNKE,EAAU,mCAKhBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAa,mCAAG,6FACrBC,EAAS,CACbC,QAASJ,EACTK,SAAU,SAHe,SAKJJ,EAAAA,EAAAA,IAAU,sBAAuB,CAAEE,OAAAA,IAL/B,cAKrBG,EALqB,yBAMpBA,EAASf,MANW,2CAAH,qDASbgB,EAAiB,mCAAG,WAAMb,GAAN,gFACzBS,EAAS,CACbC,QAASJ,EACTK,SAAU,QACVG,eAAe,EACfC,MAAOf,GALsB,SAORO,EAAAA,EAAAA,IAAU,eAAgB,CAAEE,OAAAA,IAPpB,cAOzBG,EAPyB,yBAQxBA,EAASf,MARe,2CAAH,sDAWjBmB,EAAiB,mCAAG,WAAMjB,GAAN,gFACzBU,EAAS,CACbC,QAASJ,EACTK,SAAU,SAHmB,SAKRJ,EAAAA,EAAAA,IAAA,gBAAmBR,GAAM,CAAEU,OAAAA,IALnB,cAKzBG,EALyB,yBAMxBA,EAASf,MANe,2CAAH,sDASjBD,EAAW,mCAAG,WAAMG,GAAN,gFACnBU,EAAS,CACbC,QAASJ,EACTK,SAAU,SAHa,SAKFJ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAiC,CAAEU,OAAAA,IALjC,cAKnBG,EALmB,yBAMlBA,EAASf,KAAKoB,KAClBnB,KAAI,SAAAoB,GACH,MAAO,CACLnB,GAAImB,EAAMnB,GACVC,KAAMkB,EAAMlB,KACZC,OAAQkB,EAAUD,EAAME,cAE3B,IACAC,MAAM,EAAG,KAda,2CAAH,sDAiBXC,EAAY,mCAAG,WAAMvB,GAAN,gFACpBU,EAAS,CACbC,QAASJ,EACTK,SAAU,SAHc,SAKHJ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAiC,CAAEU,OAAAA,IALhC,cAKpBG,EALoB,yBAMnBA,EAASf,KAAK0B,QAClBzB,KAAI,SAAA0B,GACH,MAAO,CACLzB,GAAIyB,EAAKzB,GACTC,KAAMwB,EAAKC,OACXC,QAASF,EAAKE,QAEjB,IACAL,MAAM,EAAG,KAdc,2CAAH,sDAiBZF,EAAY,SAAAQ,GAAG,OAAKA,EArET,kCAqEiCA,EAnEvD,sEAmE0B,C","sources":["components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","services/api.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchActors } from 'services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetch = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchActors(movieId);\n\n        setActors(data);\n      } catch (error) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ul>\n        {actors.map(({ id, name, poster }) => (\n          <li key={id}>\n            <p>{name}</p>\n            <img src={poster} alt={name} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #000000aa;\n  color: white;\n`;\n","import { LoaderBox } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderBox>\n      <span>...LOADING</span>\n    </LoaderBox>\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst API_KEY = '09d7a3eefc954f8342048cf5b31d1e79';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500';\nconst NO_POSTER =\n  'https://fakeimg.pl/400x600/6693ba/ffffff?text=No+Poster&font=lobster';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get('/trending/movie/day', { params });\n  return response.data;\n};\n\nexport const fetchMoviesByName = async name => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n    query: name,\n  };\n  const response = await axios.get('search/movie', { params });\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}`, { params });\n  return response.data;\n};\n\nexport const fetchActors = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}/credits`, { params });\n  return response.data.cast\n    .map(actor => {\n      return {\n        id: actor.id,\n        name: actor.name,\n        poster: getPoster(actor.profile_path),\n      };\n    })\n    .slice(0, 10);\n};\n\nexport const fetchReviews = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${id}/reviews`, { params });\n  return response.data.results\n    .map(item => {\n      return {\n        id: item.id,\n        name: item.author,\n        content: item.content,\n      };\n    })\n    .slice(0, 10);\n};\n\nexport const getPoster = url => (url ? BASE_POSTER_URL + url : NO_POSTER);\n"],"names":["movieId","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","fetch","fetchActors","data","map","id","name","poster","src","alt","LoaderBox","styled","API_KEY","axios","fetchTrending","params","api_key","language","response","fetchMoviesByName","include_adult","query","fetchMovieDetails","cast","actor","getPoster","profile_path","slice","fetchReviews","results","item","author","content","url"],"sourceRoot":""}